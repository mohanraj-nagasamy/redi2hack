type Customer {
    id: ID!
    name: String!
    industry: String
}

type Person {
    name: String!
}

enum EventType {
    CustomerCreated
    CustomerUpdated
    CustomerDeleted
}

type Event {
    message: String!
    eventType: EventType!
}

input CustomerCreateInput {
    name: String!
    industry: String
}

input CustomerUpdateInput {
    name: String!
    industry: String
}

type Query {
    customers: [Customer!]!
    searchCustomer(q: String!): [Customer!]!
}

type Mutation {
    createCustomer(input: CustomerCreateInput!): Customer!
    updateCustomer(customerId: Int, input: CustomerUpdateInput): Customer!
    deleteCustomer(customerId: Int): Customer!
    resetRedis: String!
}

type Subscription {
    subscribeEvents(fromStart: Boolean = true): Event
}
